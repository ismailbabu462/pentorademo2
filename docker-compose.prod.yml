# Production Docker Compose Configuration for Google Cloud
# This configuration is optimized for production deployment

services:
  # MySQL Service
  mysql:
    image: mysql:8.0
    container_name: pentest_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-rootpassword123}
      MYSQL_DATABASE: pentest_suite
      MYSQL_USER: pentest_user
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-pentest_password}
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - pentest_network
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD:-rootpassword123}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Service - For Celery task queue
  redis:
    image: redis:7-alpine
    container_name: pentest_redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - pentest_network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Ollama Service - AI Model Server
  ollama:
    image: ollama/ollama:latest
    container_name: pentest_ollama
    restart: unless-stopped
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - pentest_network
    environment:
      - OLLAMA_HOST=0.0.0.0

  # Backend Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        - BUILDKIT_INLINE_CACHE=1
    container_name: pentest_backend
    restart: unless-stopped
    environment:
      - DATABASE_URL=mysql+pymysql://pentest_user:${MYSQL_PASSWORD:-pentest_password}@mysql:3306/pentest_suite
      - CORS_ORIGINS=https://pentorasecbeta.mywire.org,https://www.pentorasecbeta.mywire.org
      - LEMONSQUEEZY_WEBHOOK_SECRET=${LEMONSQUEEZY_WEBHOOK_SECRET:-pentora_webhook_secret_2024}
      - OLLAMA_URL=http://ollama:11434
      - OLLAMA_MODEL=llama3.1
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-super-secure-jwt-secret-key-change-in-production}
      - LOG_LEVEL=WARNING
      - DEBUG=false
      - ENVIRONMENT=production
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_started
    networks:
      - pentest_network
    volumes:
      - backend_data:/app
      - tools_data:/opt/tools:ro
    command: python -m uvicorn server:app --host 0.0.0.0 --port 8001
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Celery Worker Service - For background AI tasks
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        - BUILDKIT_INLINE_CACHE=1
    container_name: pentest_celery_worker
    restart: unless-stopped
    command: celery -A celery_app worker --loglevel=info --queues=vulnerability_analysis
    volumes:
      - backend_data:/app
      - tools_data:/opt/tools:ro
    networks:
      - pentest_network
    environment:
      - DATABASE_URL=mysql+pymysql://pentest_user:${MYSQL_PASSWORD:-pentest_password}@mysql:3306/pentest_suite
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      - OLLAMA_URL=http://ollama:11434
      - OLLAMA_MODEL=llama3.1
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-super-secure-jwt-secret-key-change-in-production}
      - LOG_LEVEL=WARNING
      - DEBUG=false
      - ENVIRONMENT=production
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_started

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - BUILDKIT_INLINE_CACHE=1
    container_name: pentest_frontend
    restart: unless-stopped
    environment:
      - REACT_APP_API_URL=https://pentorasecbeta.mywire.org/api
      - REACT_APP_BACKEND_URL=https://pentorasecbeta.mywire.org
      - NODE_ENV=production
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - pentest_network
    volumes:
      - frontend_data:/app
      - /app/node_modules

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: pentest_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
      - nginx_logs:/var/log/nginx
    networks:
      - pentest_network
    depends_on:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    container_name: pentest_certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
      - ./certbot/logs:/var/log/letsencrypt
    networks:
      - pentest_network
    command: certonly --webroot --webroot-path=/var/www/certbot --email admin@pentorasecbeta.mywire.org --agree-tos --no-eff-email -d pentorasecbeta.mywire.org

volumes:
  mysql_data:
  redis_data:
  tools_data:
  ollama_data:
  nginx_logs:
  backend_data:
  frontend_data:

networks:
  pentest_network:
    driver: bridge
